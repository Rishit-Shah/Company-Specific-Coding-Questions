What the question is asking   (Similar question to LC 1094- Carpooling)

You’re given:

A total capacity (like seats in a car or plane).

A list of bookings, each with:

booking_id

number of passengers

start_time and end_time

The function check_first_booking_feasibility(capacity, bookings) is supposed to check if the first booking (B1) can be accepted without ever exceeding capacity at any point in time, considering all other bookings.


Test Cases:
Non-overlapping trips

Input: trips = [[2,1,5],[3,5,7]], capacity = 5  
Output: true  


No overlap → max passengers = 3.

Exact capacity usage

Input: trips = [[2,1,5],[3,3,7]], capacity = 5  
Output: true  


Overlap at [3,5] → total = 5 (fits exactly).

Trips starting as others end

Input: trips = [[2,1,3],[2,3,5]], capacity = 3  
Output: true  


One ends exactly when another starts, no overlap.

Single small trip

Input: trips = [[1,2,5]], capacity = 4  
Output: true  


Only one trip, well within capacity.

❌ Invalid Cases (Output: false)

Overlap exceeds capacity

Input: trips = [[2,1,5],[3,3,7]], capacity = 4  
Output: false  


Overlap at [3,5] → total = 5 > 4.

Single trip too large

Input: trips = [[6,2,6]], capacity = 5  
Output: false  


One trip alone requires more than capacity.

Multiple overlaps exceed capacity

Input: trips = [[2,1,4],[3,2,5],[4,4,6]], capacity = 6  
Output: false  


At time 4, total = 2+3+4 = 9 > 6.

⚡ Quick Summary Rule:

Always track overlaps.

If any point > capacity → false.

Else → true.





CODE:

public class BookingTest {
    public static void main(String[] args) {
        int capacity = 4;

        // Test case 1: Should be true
        int[][] bookings1 = {
            {2, 10, 20},
            {2, 25, 35}
        };
        System.out.println("Test 1: " + checkFirstBookingFeasibility(capacity, bookings1));

        // Test case 2: Should be false
        int[][] bookings2 = {
            {3, 10, 30},
            {2, 15, 25}
        };
        System.out.println("Test 2: " + checkFirstBookingFeasibility(capacity, bookings2));

        // Test case 3: Should be true
        int[][] bookings3 = {
            {2, 10, 40},
            {1, 15, 25},
            {1, 30, 35}
        };
        System.out.println("Test 3: " + checkFirstBookingFeasibility(capacity, bookings3));

        // Test case 4: Should be false
        int[][] bookings4 = {
            {2, 10, 20},
            {3, 10, 15}
        };
        System.out.println("Test 4: " + checkFirstBookingFeasibility(capacity, bookings4));
    }

    public static boolean checkFirstBookingFeasibility(int capacity, int[][] bookings) {
        int firstPassengers = bookings[0][0];
        int firstStart = bookings[0][1];
        int firstEnd = bookings[0][2];

        // If the first booking itself exceeds capacity, reject
        if (firstPassengers > capacity) {
            return false;
        }

        // Compare with every other booking
        for (int i = 1; i < bookings.length; i++) {
            int passengers = bookings[i][0];
            int secondstart = bookings[i][1];
            int secondend = bookings[i][2];

            // Check overlap
            boolean overlap = (firstStart < secondend && secondstart < firstEnd);
            if (overlap) {
                if (firstPassengers + passengers > capacity) {
                    return false;
                }
            }
        }

        return true;
    }
}
